import argparse
from logging import getLogger
from pathlib import Path


logger = getLogger(__name__)


def fuse_master_csv(full_path):
    
    pass


def output_master_csv(full_path, master_csv):
    pass


def move_audio_files(full_path, master_csv):
    pass


def copy_audio_files(full_path, master_csv):
    pass


def main():
    parser = argparse.ArgumentParser(description='Convert google music takeout results to plex-friendly structure')
    parser.add_argument(
        'takeout_tracks_directory',
        type='str',
        help='The full path to the directory containing the flat list of tracks and corresponding csv files.',
    )
    parser.add_argument(
        'dry_run',
        type=bool,
        default=False,
        help='Prevent the renaming, removal, or creation of any actual audio files. Will still output the combined CSV file for manul confirmation',
    )
    parser.add_argument(
        'move_files',
        type=bool,
        default=False,
        help='In order to save space during operation, actually move files instead of copying them. If something goes wrong during the command, rolling back will not be possible.'
    )
    parser.add_argument(
        'master_csv',
        type=str,
        default='',
        help='Specify the google takeout csv file to use for operating on audio files. This can be generated by running with dry-run first. Specifying it will skip the csv file scrape step.',
    )
    args = parser.parse_args()

    # Validate tracks directory is actually a directory.
    full_path = Path(args.takeout_tracks_directory)
    if not full_path.is_dir():
        logger.error('Takeout tracks directory must be a directory. %s is not a directory.', str(full_path.absolute()))
        return

    # Validate the master csv is actually a file if it was specified
    master_csv = Path(args.master_csv)
    use_master_csv = False
    if args.master_csv:
        if master_csv.is_file():
            use_master_csv = True
        else:
            logger.error('Master CSV file must be a csv file. %s is not a csv file.', str(master_csv.absolute()))

    if not use_master_csv:
        master_csv = fuse_master_csv(full_path)
        output_master_csv(master_csv, full_path)

    if not dry_run:
        if args.move_files:
            move_audio_files(full_path, master_csv)
        else:
            copy_audio_files(full_path, master_csv)

if __name__ = "__main__":
    main()
